extends layout

block content
  h1.mb-4 Available Tables

  form.mb-4#searchForm
    .row
      .col-md-3
        label.form-label(for="date") Date
        input#date.form-control(type="date", name="date", required, min=`${new Date().toISOString().split('T')[0]}`)
      .col-md-3
        label.form-label(for="time") Time
        select#time.form-control(type="time", name="time", required)
          option(value="10:00") 10:00 AM
          option(value="11:00") 11:00 AM
          option(value="12:00") 12:00 AM
          option(value="13:00") 13:00 PM
          option(value="14:00") 14:00 PM
          option(value="15:00") 15:00 PM
          option(value="16:00") 16:00 PM
          option(value="17:00") 17:00 PM
          option(value="18:00") 18:00 PM
          option(value="19:00") 19:00 PM
          option(value="20:00") 20:00 PM
          option(value="21:00") 21:00 PM
          option(value="22:00") 22:00 PM
          option(value="23:00") 23:00 PM
      .col-md-3
        label.form-label(for="party_size") Party Size
        input#party_size.form-control(type="number", name="party_size", required, min="1")
      .col-md-3
        button.btn.btn-primary.mt-4(type="submit") Search Tables

  #tableResults
    if tables && tables.length > 0
      .row
        each table in tables
          .col-md-4.mb-3
            .card
              .card-body
                h5.card-title Table #{table.table_number}
                p.card-text Capacity: #{table.capacity}
                button.btn.btn-success.reserve-btn(data-table-id=table._id) Reserve
    else
      p No available tables found. Please try different search criteria.

  script.
    //Deshabilita las horas que ya han pasado para que no se puedan seleccionar
     function updateTimeOptions() {
      const selectedDate = document.getElementById('date').value;
      const currentDate = new Date().toISOString().split('T')[0];
      const timeSelect = document.getElementById('time');
      const now = new Date();

      if (selectedDate === currentDate) {
        const currentHour = now.getHours();
        const options = timeSelect.options;
        
        for (let i = 0; i < options.length; i++) {
          const optionValue = options[i].value;
          const optionHour = parseInt(optionValue.split(':')[0], 10);

          // Deshabilitar las horas que ya han pasado
          if (optionHour <= currentHour) {
            options[i].disabled = true;
          } else {
            options[i].disabled = false;
          }
        }
      } else {
        // Habilitar todas las opciones si la fecha no es la actual
        for (let i = 0; i < timeSelect.options.length; i++) {
          timeSelect.options[i].disabled = false;
        }
      }
    }
   
    window.addEventListener('load', updateTimeOptions);
    document.getElementById('date').addEventListener('change', updateTimeOptions);

    document.getElementById('searchForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const date = document.getElementById('date').value;
      const time = document.getElementById('time').value;
      const party_size = document.getElementById('party_size').value;

      fetch(`/api/tables/available?date=${date}&time=${time}&party_size=${party_size}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(tables => {
          const resultsContainer = document.getElementById('tableResults');
          if (tables.length > 0) {
            resultsContainer.innerHTML = `
              <h2>Available Tables for ${date} at ${time}</h2>
              <div class="row">
                ${tables.map(table => `
                  <div class="col-md-4 mb-3">
                    <div class="card">
                      <div class="card-body">
                        <h5 class="card-title">Table ${table.table_number}</h5>
                        <p class="card-text">Capacity: ${table.capacity}</p>
                        <button class="btn btn-success reserve-btn" data-table-id="${table._id}">Reserve</button>
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            `;
          } else {
            resultsContainer.innerHTML = '<p>No available tables found. Please try different search criteria.</p>';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          document.getElementById('tableResults').innerHTML = '<p>An error occurred while searching for tables. Please try again or contact support if the problem persists.</p>';
        });
    });

    document.addEventListener('click', function(e) {
      if (e.target && e.target.classList.contains('reserve-btn')) {
        const tableId = e.target.getAttribute('data-table-id');
        const date = document.getElementById('date').value;
        const time = document.getElementById('time').value;
        const party_size = document.getElementById('party_size').value;
        window.location.href = `/reservations/create?table_id=${tableId}&date=${date}&time=${time}&party_size=${party_size}`;
      }
    });
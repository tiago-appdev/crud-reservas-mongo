extends layout

block content
  .container.py-4
    h1.mb-4 Admin Dashboard
    .row
      .col-md-3.mb-4
        .card.bg-primary.text-white
          .card-body
            h5.card-title Total Tables
            h2.card-text#totalTables #{stats.totalTables}
      .col-md-3.mb-4
        .card.bg-success.text-white
          .card-body
            h5.card-title Available Tables
            h2.card-text#availableTables #{stats.availableTables}
      .col-md-3.mb-4
        .card.bg-info.text-white
          .card-body
            h5.card-title Today's Reservations
            h2.card-text#todayReservations #{stats.todayReservations}
      .col-md-3.mb-4
        .card.bg-warning.text-white
          .card-body
            h5.card-title Total Reservations
            h2.card-text#totalReservations #{stats.totalReservations}

    .row.mb-4
      .col-12
        .card
          .card-header.d-flex.justify-content-between.align-items-center
            h5.mb-0 Table Management
            button.btn.btn-primary.btn-sm#bulkUpdateBtn Update Selected
          .card-body
            .table-responsive
              table.table#tablesTable
                thead
                  tr
                    th
                      input(type='checkbox' id='selectAll')
                    th Table Number
                    th Capacity
                    th Status
                    th Actions
                tbody
                  each table in tables
                    tr(data-table-id=table._id)
                      td
                        input(type='checkbox' class='table-checkbox')
                      td= table.table_number
                      td= table.capacity
                      td
                        span(class=table.available ? 'badge bg-success' : 'badge bg-danger')
                          = table.available ? 'Available' : 'Unavailable'
                      td
                        button.btn.btn-sm.btn-outline-primary.me-2(onclick=`editTable('${table._id}')`) Edit
                        button.btn.btn-sm.btn-outline-danger(onclick=`deleteTable('${table._id}')`) Delete

    .row
      .col-12
        .card
          .card-header.d-flex.justify-content-between.align-items-center
            h5.mb-0 Recent Reservations
            button.btn.btn-primary.btn-sm#refreshReservations Refresh
          .card-body
            .table-responsive
              table.table#reservationsTable
                thead
                  tr
                    th Date
                    th Time
                    th Guest Name
                    th Table
                    th Guests
                    th Status
                    th Actions
                tbody
                  each reservation in recentReservations
                    tr
                      td= new Date(reservation.date).toLocaleDateString()
                      td= new Date(reservation.date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
                      td= reservation.user_id.name
                      td= `Table ${reservation.table_id.table_number}`
                      td= reservation.guests
                      td
                        span.badge.bg-success Active
                      td
                        button.btn.btn-sm.btn-outline-primary.me-2(onclick=`viewReservation('${reservation._id}')`) View
                        button.btn.btn-sm.btn-outline-danger(onclick=`cancelReservation('${reservation._id}')`) Cancel

  script(src='https://cdn.jsdelivr.net/npm/chart.js')
  script.
    document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('selectAll').addEventListener('change', function() {
        document.querySelectorAll('.table-checkbox').forEach(checkbox => {
        checkbox.checked = this.checked;
        });
    });

    document.getElementById('bulkUpdateBtn').addEventListener('click', async function() {
        const selectedTables = Array.from(document.querySelectorAll('.table-checkbox:checked'))
        .map(checkbox => checkbox.closest('tr').dataset.tableId);
        
        if (selectedTables.length === 0) {
        alert('Please select at least one table');
        return;
        }

        const makeAvailable = confirm('Make selected tables available?');
        
        try {
        const response = await fetch('/api/admin/tables/bulk-update', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json',
            },
            body: JSON.stringify({
            tableIds: selectedTables,
            available: makeAvailable
            })
        });

        if (!response.ok) throw new Error('Failed to update tables');
        location.reload();
        } catch (error) {
        console.error('Error updating tables:', error);
        alert('Failed to update tables');
        }
    });

    // Table actions
    window.editTable = async function(id) {
        try {
        const response = await fetch(`/api/tables/${id}`);
        if (!response.ok) throw new Error('Failed to fetch table data');
        
        const table = await response.json();
        const newCapacity = prompt('Enter new capacity:', table.capacity);
        
        if (newCapacity === null) return;
        
        const updateResponse = await fetch(`/api/tables/${id}`, {
            method: 'PUT',
            headers: {
            'Content-Type': 'application/json',
            },
            body: JSON.stringify({
            capacity: parseInt(newCapacity, 10)
            })
        });
        
        if (!updateResponse.ok) throw new Error('Failed to update table');
        location.reload();
        } catch (error) {
        console.error('Error:', error);
        alert('Failed to edit table');
        }
    };

    window.deleteTable = async function(id) {
        if (!confirm('Are you sure you want to delete this table?')) return;
        
        try {
        const response = await fetch(`/api/tables/${id}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            response.json().then(data => {
                console.log(data)
                throw new Error(data.message);
            });
        };
        location.reload();
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete table');
        }
    };

    window.viewReservation = async function(id) {
        try {
        const response = await fetch(`/api/reservations/${id}`);
        if (!response.ok) throw new Error('Failed to fetch reservation');
        
        const reservation = await response.json();
        const details = `
            Guest: ${reservation.user_id.name}
            Date: ${new Date(reservation.date).toLocaleDateString()}
            Time: ${new Date(reservation.date).toLocaleTimeString()}
            Table: ${reservation.table_id.table_number}
            Guests: ${reservation.guests}
        `;
        alert(details);
        } catch (error) {
        console.error('Error:', error);
        alert('Failed to view reservation details');
        }
    };

    window.cancelReservation = async function(id) {
        if (!confirm('Are you sure you want to cancel this reservation?')) return;
        
        try {
        const response = await fetch(`/api/reservations/${id}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Failed to cancel reservation');
        location.reload();
        } catch (error) {
        console.error('Error:', error);
        alert('Failed to cancel reservation');
        }
    };

    document.getElementById('refreshReservations').addEventListener('click', () => {
        location.reload();
    });
    });
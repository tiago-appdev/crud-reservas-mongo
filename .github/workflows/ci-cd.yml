name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true

    - name: Seed the MongoDB database
      run: npm run seed
      env:
        MONGODB_URI: mongodb://localhost:27017/restaurant-reservations-test
  
    
    - name: Run unit tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/restaurant-reservations-test
        JWT_SECRET: test-secret
        EMAIL_USER: test@example.com
        EMAIL_PASS: test-password
        
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/restaurant-reservations-test
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30


    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.BUILD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "üöÄ Triggering Render production deployment..."
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json"
        
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 90
        
    - name: Health check production
      run: |
        echo "üîç Checking production health..."
        curl -f "${{ secrets.PRODUCTION_URL }}/health" || exit 1
        echo "‚úÖ Production deployment successful!"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment completed successfully!"
        # Add Slack/Discord notification here if needed
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed, consider rollback"
        # Add rollback logic here if needed